import pandas as pd
import importlib
import random
import os
from openpyxl import Workbook , load_workbook
if (os.path.exists("infofile.xlsx") == False):   #creates infofile if doesn't exist
    w=Workbook()
    file=w.active
    file.append(['name','how','time'])
    file.freeze_panes = 'A2'
    w.save('infofile.xlsx')
else:
    pass
class infooo:
    def __init__(self):
        d={'1:Tehran':['1:Shahryar','2:Eslamshahr'],'2:Isfahan':['1:Miandasht','2:Chadegan'],'3:Tabriz':['1:Maraghe','2:Tabriz']}  #list of available places to send   
        while True:
              print(" , ".join(map(str, d.keys())))       #print shahrestan
              shahrestan = input('choose code of shahrestan: ')
              a=[idx for idx in list(d.keys()) if idx[0] == shahrestan][0]    #key of choosen shahrestan in d dictionary
              print(f"{d[a]}\n")                         #print cities of choosen shahrestan
              city = input('choose code of city:')             
              self.address = {'shahrestan':a[2:],
                              'city': [idx[2:] for idx in  d[a] if idx[0] == str(city)][0],
                              'details':input('enter details like house number:\n'),
                              'postcode':'postcode:'+input('enter post code:\n')} 
              
              self.postcode=self.address['postcode'][9:]
              if not self.postcode.isdigit():    # check if a string contains a number with .isdigit()
                  print ("*error: Enter only numbers for post code*\n")
                  continue
              elif len(self.postcode) != 10:      #check if postcode has 16 digits
                  print ("*error: Enter 10 digits for post code*\n")
                  continue
              else: 
                  break

        self.phone = input('phone:')
        self.name = input('name:')
        self.time = int(input('time:'))       
        self.new = [self.name,('peyk' if shahrestan=='1' else 'post'),self.time]       
        w=load_workbook('infofile.xlsx')
        file=w.active
        file.append(self.new)
        w.save('infofile.xlsx')
        self.when_send()
    def when_send(self):     
      if info.loc[-1]['time'] in range(12,15):  
         if info[info.time == 'noon'].shape[0]<3:
            info.loc[-1]["time"] = 'noon'
         else:
            info.loc[-1]['time']='morning'
      elif info.loc[-1][-1]['time'] in range(15,18):  
         if info[info.time == 'evening'].shape[0]<3:
            info.loc[-1]["time"] = 'eveing'            
         else:  
            info.loc[-1]['time']='morning'      
      else:
          info.loc[-1]['time']='morning'
      info.to_excel('infofile.xlsx',index=False)




          
        
class Order:
    def __init__(self):
        self.cart_item = pd.DataFrame()
    def check_quantity(self,id,quantity,color): 
            called_item = items.loc[(items['id'] == id) & (items['color'] == color)]
            if (quantity <= called_item['stock']).any():
                return True
            elif (quantity > called_item['stock']).any() or called_item['stock']=='unavailable':
                return False
    def add_to_cart(self):
            while True:
                m = input('bags or shoes:').capitalize()       #choose bag or shoe
                df = pd.read_csv(m+'.csv')
                print(df.to_string(index=False))
                id = int(input('select the id of what u want:'))
                quantity = int(input('how many?: '))
                print(df.loc[df['id']==id,'color'].to_string(index=False))             #print colors to choose from       
                color = input('which color?: ')
                if self.check_quantity(id,quantity,color):   #check the quantity using the function       
                      called_item = df.loc[(df['id'] == id) & (df['color'] == color),['id','name','color','unit price']]
                      called_item['quantity'] = quantity         #add quantity column
                      called_item['total price'] = called_item['quantity']*called_item['unit price']         #add total price column
                      self.cart_item = self.cart_item._append(called_item)    #add to cart
                      checkout = input ('checkout?: ').capitalize()     #checkout or continue to order
                      if checkout == 'Yes':
                          self.cart_item.loc['total'] = self.cart_item.loc[:,['quantity','total price']].sum(numeric_only=True)  #add total row
                          print(self.checkout())                          
                          
                          break;
                      continue;
                else:
                      print('insufficient inventory')
                      continue;
    def checkout(self):
        c = infooo()   #use infooo class to get information
        #enter a port
        
        self.order_no = random.randint(10**10,10**11)
        self.card_no = (input('enter your card number: '))   
        def confirm(self):
            if len(self.card_no)==16:
                return True                                        
            else:
                return False           

        if confirm(self):
                #save confirmation as txt file
                f = open("conf.txt", "w+")
                f.writelines(["payment status :successful \n",f"name : {c.name} \n",f"card.no:{self.card_no} \n"])
                f.close() 
                #save factor as txt file
                df = pd.read_excel("infofile.xlsx")
                df1 = df.tail(1).stack().reset_index(level=0, drop=True).rename_axis('a').reset_index(name='b')    #makes columns vertical
                f = open("factor.txt", "w+")
                f.writelines([f"{self.cart_item.fillna('')} \n","*******\n",
                f"order number : {self.order_no} \n",
                f"address : {' '.join(map(str, c.address))} \n",
                               '\n'.join(['{} : {}'.format(a,b) for a, b in df1.to_numpy()])])   #print values with columns names(column : value)
                f.close()
                h = Hesabdari()
                h.hh()
                return open("conf.txt","r+").read() + open("factor.txt","r+").read()
        else:
                #save confirmation as txt file
                f = open("conf.txt", "w+")
                f.writelines(["payment status :unsuccessful \n",f"name : {c.name} \n",f"card.no:{self.card_no} \n"])
                f.close()   
                return open("conf.txt","r+").read() 
